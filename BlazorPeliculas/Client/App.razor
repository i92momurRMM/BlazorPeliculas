@inject LazyAssemblyLoader lazyLoader
@using System.Reflection

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" OnNavigateAsync="OnNavigateAsync"
            AdditionalAssemblies="assemblies">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <text>Autorizando...</text>
                </Authorizing>
                <NotAuthorized>
                    <text>No estas autorizado para ver este contenido</text>
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <CustomNotFound></CustomNotFound>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private List<Assembly> assemblies = new List<Assembly>();
    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (args.Path.EndsWith("counter"))
        {
            var assembliesCargados = await lazyLoader.LoadAssembliesAsync(
                new List<string> { "MathNet.Numerics.dll" });
            assemblies.AddRange(assembliesCargados);
        }
    }
}